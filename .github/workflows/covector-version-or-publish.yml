name: version or publish

on:
  push:
    branches:
      - master

jobs:
  status:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.covector.outputs.status }}
      version: ${{ steps.new-version.outputs.version }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for use of git history
      - name: covector status
        uses: jbolda/covector/packages/action@5797e792f532ad9bcb40c19cda080ca7713c0d91
        id: covector
        with:
          command: "status"
      - name: get new version
        id: new-version
        run: |
          echo "::set-output name=version::$(cargo read-manifest | jq .version | tr -d '\"')"
  start-release:
    needs: status
    if: ${{ needs.status.outputs.status == 'No changes.'' }}
    name: Initialize Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@9729932bfb75c05ad1f6e3a729294e05abaa7001
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: pre-release-${{ needs.status.outputs.version }}
          name: v${{ needs.status.outputs.version }}
          body: |
            New version built with Covector
          draft: true
          prerelease: true
  build-binaries:
    needs: [start-release, status]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            target: netlify_deploy
          - os: macos-latest
            platform: macos
            target: netlify_deploy
          - os: windows-latest
            platform: windows
            target: netlify_deploy.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: tar the binary for upload
        run: |
          if [[ "${{matrix.platform}}" == "macos" ]]; then
              brew install gnu-tar
              gtar -C target -cvzf netlify-deploy-${{matrix.platform}}-${{ needs.status.outputs.version }}.tar.gz release/${{matrix.target}}
          else
              tar -C target -cvzf netlify-deploy-${{matrix.platform}}-${{ needs.status.outputs.version }}.tar.gz release/${{matrix.target}}
          fi
        shell: bash
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.start-release.outputs.upload_url }}
          asset_path: netlify-deploy-${{matrix.platform}}-${{github.sha}}.tar.gz
          asset_name: netlify-deploy-${{matrix.platform}}-${{github.sha}}.tar.gz
          asset_content_type: application/octet-stream
      - name: Publish GH Release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: "${{ needs.start-release.outputs.release_id }}",
              draft: false,
            });
  version:
    needs: status
    if: ${{ needs.status.outputs.status != 'No changes.' }}
    runs-on: ubuntu-latest
    timeout-minutes: 65
    outputs:
      change: ${{ steps.covector.outputs.change }}
      commandRan: ${{ steps.covector.outputs.commandRan }}
      successfulPublish: ${{ steps.covector.outputs.successfulPublish }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for use of git history
      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      - name: covector version or publish (publish when no change files present)
        uses: jbolda/covector/packages/action@covector-v0
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version-or-publish"
          createRelease: true
      - name: Create Pull Request With Versions Bumped
        id: cpr
        uses: peter-evans/create-pull-request@v3
        if: steps.covector.outputs.commandRan == 'version'
        with:
          title: "Publish New Versions"
          commit-message: "publish new versions"
          labels: "version updates"
          branch: "release"
          body: ${{ steps.covector.outputs.change }}
  publish:
    needs: [start-release, build-binaries]
    runs-on: ubuntu-latest
    timeout-minutes: 65
    outputs:
      change: ${{ steps.covector.outputs.change }}
      commandRan: ${{ steps.covector.outputs.commandRan }}
      successfulPublish: ${{ steps.covector.outputs.successfulPublish }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for use of git history
      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"
      - name: covector version or publish (publish when no change files present)
        uses: jbolda/covector/packages/action@covector-v0
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version-or-publish"
          createRelease: true
      - name: Publish GH Release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: "${{ needs.start-release.outputs.release_id }}",
              body: "${{ steps.covector.outputs.change }}",
            });
